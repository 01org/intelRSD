--- ipmi_intf.c	2014-10-23 21:41:13.000000000 +0200
+++ ipmi_intf.c.patch	2015-10-08 11:57:00.231397133 +0200
@@ -1,21 +1,21 @@
 /*
  * Copyright (c) 2003 Sun Microsystems, Inc.  All Rights Reserved.
- *
+ *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
- *
+ *
  * Redistribution of source code must retain the above copyright
  * notice, this list of conditions and the following disclaimer.
- *
+ *
  * Redistribution in binary form must reproduce the above copyright
  * notice, this list of conditions and the following disclaimer in the
  * documentation and/or other materials provided with the distribution.
- *
+ *
  * Neither the name of Sun Microsystems, Inc. or the names of
  * contributors may be used to endorse or promote products derived
  * from this software without specific prior written permission.
- *
+ *
  * This software is provided "AS IS," without a warranty of any kind.
  * ALL EXPRESS OR IMPLIED CONDITIONS, REPRESENTATIONS AND WARRANTIES,
  * INCLUDING ANY IMPLIED WARRANTY OF MERCHANTABILITY, FITNESS FOR A
@@ -29,7 +29,29 @@
  * LIABILITY, ARISING OUT OF THE USE OF OR INABILITY TO USE THIS SOFTWARE,
  * EVEN IF SUN HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
  */
-
+/*!
+ * @copyright
+ * Copyright (c) 2015-2016 Intel Corporation
+ *
+ * @copyright
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * @copyright
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * @copyright
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ * This file is patched only to mock global variables which control the output
+ * of the program. PSME compiles part of IPMItool's sources into static
+ * library and link it to the Compute Agent.
+ */
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
@@ -116,6 +138,13 @@
 	NULL
 };

+/*
+ * Mocked global variables to allow compilation of few IPMItool's source files
+ * into static library and link it to the PSME Compute Agent.
+ */
+int csv_output;
+int verbose;
+
 /* ipmi_intf_print  -  Print list of interfaces
  *
  * no meaningful return code
@@ -283,7 +312,7 @@
 	if (kgkey == NULL)
 		return;

-	memcpy(intf->session->v2_data.kg, kgkey,
+	memcpy(intf->session->v2_data.kg, kgkey,
 	       __min(strlen(kgkey), IPMI_KG_BUFFER_SIZE));
 }

@@ -392,7 +421,7 @@
 	/* getaddrinfo() returns a list of address structures.
 	 * Try each address until we successfully connect(2).
 	 * If socket(2) (or connect(2)) fails, we (close the socket
-	 * and) try the next address.
+	 * and) try the next address.
 	 */

 	session->ai_family = AF_UNSPEC;
@@ -423,8 +452,8 @@
 			if (addr6->sin6_scope_id != 0) {
 				len = sizeof(struct sockaddr_in6);
 				if (getnameinfo((struct sockaddr *)addr6, len, hbuf, sizeof(hbuf), NULL, 0, NI_NUMERICHOST) == 0) {
-					lprintf(LOG_DEBUG, "Trying address: %s scope=%d",
-						hbuf,
+					lprintf(LOG_DEBUG, "Trying address: %s scope=%d",
+						hbuf,
 						addr6->sin6_scope_id);
 				}
 				if (connect(intf->fd, rp->ai_addr, rp->ai_addrlen) != -1) {
@@ -461,17 +490,17 @@
 						}
 						len = sizeof(struct sockaddr_in6);
 						if ( getnameinfo((struct sockaddr *)tmp6, len, hbuf, sizeof(hbuf), NULL, 0, NI_NUMERICHOST) == 0) {
-							lprintf(LOG_DEBUG, "Testing %s interface address: %s scope=%d",
-								ifa->ifa_name != NULL ? ifa->ifa_name : "???",
-								hbuf,
+							lprintf(LOG_DEBUG, "Testing %s interface address: %s scope=%d",
+								ifa->ifa_name != NULL ? ifa->ifa_name : "???",
+								hbuf,
 								tmp6->sin6_scope_id);
 						}

 						if (tmp6->sin6_scope_id != 0) {
 							addr6->sin6_scope_id = tmp6->sin6_scope_id;
 						} else {
-							/*
-							 * No scope information in interface address information
+							/*
+							 * No scope information in interface address information
 							 * On some OS'es, getifaddrs() is returning out the 'kernel' representation
 							 * of scoped addresses which stores the scope in the 3rd and 4th
 							 * byte. See also this page:
@@ -492,7 +521,7 @@
 								lprintf(LOG_DEBUG, "Successful connected on %s interface with scope id %d", ifa->ifa_name, tmp6->sin6_scope_id);
 								break;  /* Success */
 							}
-						}
+						}
 					}
 				}
 				freeifaddrs(ifaddrs);
@@ -522,7 +551,7 @@
 	/* check if request size is not specified */
 	if (!size) {
 		/*
-		 * The IPMB standard overall message length for �non -bridging�
+		 * The IPMB standard overall message length for �non -bridging�
 		 * messages is specified as 32 bytes, maximum, including slave
 		 * address. This sets the upper limit for typical IPMI messages.
 		 * With the exception of messages used for bridging messages to
@@ -579,7 +608,7 @@
 	/* check if response size is not specified */
 	if (!size) {
 		/*
-		 * The IPMB standard overall message length for �non -bridging�
+		 * The IPMB standard overall message length for �non -bridging�
 		 * messages is specified as 32 bytes, maximum, including slave
 		 * address. This sets the upper limit for typical IPMI messages.
 		 * With the exception of messages used for bridging messages to
